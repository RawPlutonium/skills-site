{"version":3,"sources":["components/Addskill.js","components/SkillsList.js","App.js","serviceWorker.js","index.js"],"names":["Addskill","props","onSubmit","z","type","value","cr","placeholder","onChange","y","className","SkillsList","renderSkill","x","name","onClick","toggleState","del","index","isEdit","state","setState","updateSkillItem","e","preventDefault","editt","input","renderUpdateFrom","ref","v","defaultValue","this","Component","App","skills","current","updateSkill","target","addNewSkill","crr","sk","push","deleteSkill","i","skls","splice","editSkill","newval","sklls","skillsList","map","skill","key","class","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.25d10d54.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Addskill = (props) =>{\r\n\r\n    return (\r\n            <form onSubmit={props.z}>\r\n                <input type=\"text\" value={props.cr} placeholder=\"Add new skill\" onChange={props.y} className=\"inputskill\" />\r\n                <button className=\"btn btnskill\">Add Skill</button>\r\n            </form>\r\n    )\r\n}\r\n\r\nexport default Addskill","import React, {Component, Fragment} from 'react';\r\n\r\nclass SkillsList extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            isEdit : false\r\n        }\r\n    \r\n    }\r\n \r\n    renderSkill = () =>{\r\n        return(\r\n        <li className=\"skillname\">\r\n            <span>{this.props.x.name}</span>\r\n            <button className=\"btn editbtn\" onClick={() => {this.toggleState()}}>Edit</button>\r\n            <button className=\"btn deletebtn\" onClick={() => {this.props.del(this.props.index)}}>Delete</button>\r\n         </li>\r\n        )\r\n\r\n    }\r\n    \r\n    //toggle \r\n    toggleState = () =>{\r\n        let {isEdit} = this.state;\r\n        this.setState({\r\n            isEdit: !isEdit\r\n        })\r\n    }\r\n    updateSkillItem = (e) =>{\r\n        e.preventDefault();\r\n        this.props.editt(this.props.index, this.input.value);\r\n        this.toggleState();\r\n    }\r\n    //updateForm\r\n    renderUpdateFrom = () =>{\r\n        return(\r\n            <form onSubmit={this.updateSkillItem} className=\"updateForm\">\r\n                <input type=\"text\" ref={(v) => {this.input = v}} defaultValue={this.props.x.name} className=\"inputUpdate\" />\r\n                <button className=\"btn updatebtn\">Update</button>\r\n            </form>\r\n        )\r\n    }\r\n    render(){\r\n        let {isEdit} = this.state\r\n        return (\r\n            <Fragment> \r\n                \r\n                {isEdit ? this.renderUpdateFrom() : this.renderSkill()}\r\n            </Fragment>\r\n          );\r\n    }\r\n  \r\n}\r\n\r\n\r\nexport default SkillsList\r\n","import React, {Component} from 'react' \nimport Addskill from './components/Addskill'\nimport SkillsList from './components/SkillsList'\nimport './App.css';\n\nclass App extends Component {\n  state={\n    skills:[\n    \n    ],\n    current: ''\n  }\n\n  //updateSkill (track the new typed skill)\n  updateSkill = (e) =>{\n    e.preventDefault();\n    this.setState({\n        current: e.target.value //input value\n      })\n  }\n\n  //AddNewSkill\n  addNewSkill = (e) => {\n    e.preventDefault();\n   let crr = this.state.current;\n   let sk = this.state.skills;\n   sk.push({name:crr})\n   this.setState({\n    skills: sk,\n    current: ''\n   })\n  }\n\n  //deleteCourse\n\n  deleteSkill = (i) => {\n    //console.log(i);\n    let skls = this.state.skills;\n    skls.splice(i, 1); //remove\n    this.setState({\n      skills: skls\n    })\n  }\n\n  //editSkill\n  editSkill = (i, newval) =>{\n    let sklls = this.state.skills;\n    let skl = sklls[i];\n    skl['name']= newval;\n    this.setState({\n      skills: sklls\n    })\n  }\n\n\n  render(){\n    const skillsList = this.state.skills.map((skill, i) => {\n      return <SkillsList x={skill} key={i} index={i} del={this.deleteSkill} editt={this.editSkill}/>\n    })\n    return (\n      <div className=\"App\">\n        <h2 className=\"heading\"><span class=\"fas fa-bahai awsome\"></span>Manage Your Skills</h2>\n        <Addskill y={this.updateSkill} z={this.addNewSkill} cr={this.state.current}/>\n        <div className=\"current\">\n      \n        { this.state.skills.length === 0 ?\n          \n          <p className=\"currentp\"> You have no current skills added. </p>\n         : \n         <>\n         <p className=\"currentp\"> Your Current Skills: </p>\n          <ul className=\"skillList\"> <li> {skillsList} </li> </ul> \n          </>\n          } \n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}